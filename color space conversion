import cv2
import matplotlib.pyplot as plt
# Function to display image using Matplotlib
def display_image(title, img):
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Convert BGR to RGB for proper 
display
plt.imshow(img_rgb)
plt.title(title)
plt.axis('off')
plt.show()
# Load the original image
image = cv2.imread('D:/ODDSEM/OSTT/photo.jpeg')
# Convert the image from RGB to Grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
# Convert the image from RGB to HSV
hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
# Convert the image from RGB to YUV
yuv_image = cv2.cvtColor(image, cv2.COLOR_BGR2YUV)
# Convert the image from RGB to LAB
lab_image = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)
# Display the original and converted images
plt.figure(figsize=(15, 10))
plt.subplot(2, 3, 1)
display_image("Original Image (RGB)", image)
plt.subplot(2, 3, 2)
plt.imshow(gray_image, cmap='gray') # Grayscale image needs to be displayed in grayscale 
mode
plt.title('Grayscale Image')
plt.axis('off')
plt.subplot(2, 3, 3)
display_image("HSV Image", hsv_image)
plt.subplot(2, 3, 4)
display_image("YUV Image", yuv_image)
plt.subplot(2, 3, 5)
display_image("LAB Image", lab_image)

2)visualize edges and canny edge detection
import cv2
import matplotlib.pyplot as plt
# Read the input image
image = cv2.imread('D:/ODDSEM/OSTT/main_image.jpg')
# Convert the image to grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
# Apply Gaussian blur to the grayscale image
blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)
# Apply Canny edge detection
edges = cv2.Canny(blurred_image, threshold1=150, threshold2=250)
# Display the original image and the edge-detected image
plt.figure(figsize=(10,5))
# Display the original image
plt.subplot(1, 2, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Original Image')
# Display the edges
plt.subplot(1, 2, 2)
plt.imshow(edges, cmap='gray')
plt.title('Edges Detected using Canny')
plt.show()

  code2:
